upstream unicorn_<%= application.downcase %>_<%= stage %> {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  # for UNIX domain socket setups:
  server unix:/tmp/unicorn.<%= application.downcase %>.<%= stage %>.sock fail_timeout=0;
}

server {
  listen 80;
  <% if nginx_server_name %>
  server_name <%= nginx_server_name %>;
  <% end  %>
  root <%= current_path %>/public;

  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }

  <% if nginx_wordpress_enabled %>

    location /<%= nginx_wordpress_url %> {
    root <%= nginx_wordpress_root %>;
    index index.php;

    <% if nginx_wordpress_w3tc_enabled %>

      # BEGIN W3TC Page Cache cache
      location ~ /<%= nginx_wordpress_url %>/wp-content/cache/page_enhanced.*html$ {
        add_header Vary "Accept-Encoding, Cookie";
      }
      location ~ /<%= nginx_wordpress_url %>/wp-content/cache/page_enhanced.*gzip$ {
        gzip off;
        types {}
        default_type text/html;
        add_header Vary "Accept-Encoding, Cookie";
        add_header Content-Encoding gzip;
      }
      # END W3TC Page Cache cache

      # BEGIN W3TC Page Cache core
      rewrite ^(.*\/)?w3tc_rewrite_test/?$ $1?w3tc_rewrite_test=1 last;
      set $cache_uri $request_uri;

      # POST requests and urls with a query string should always go to PHP
      if ($request_method = POST) {
        set $cache_uri 'null cache';
      }
      if ($query_string != "") {
        set $cache_uri 'null cache';
      }

      try_files /<%= nginx_wordpress_url %>/wp-content/cache/page_enhanced/${host}${cache_uri}_index.html $uri $uri/ /<%= nginx_wordpress_url %>/index.php?$args;
    <% else %>
      try_files $uri $uri/ /<%= nginx_wordpress_url %>/index.php?$args;
    <% end %>

    location = /<%= nginx_wordpress_url %>/favicon.ico {
      log_not_found off;
      access_log off;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
      expires max;
      access_log off;
      log_not_found off;
    }

    # Pass all .php files onto a php-fpm/php-fcgi server.
    location ~ \.php$ {
      # Zero-day exploit defense.
      # http://forum.nginx.org/read.php?2,88845,page=3
      # Won't work properly (404 error) if the file is not stored on this server, which is entirely possible with php-fpm/php-fcgi.
      # Comment the 'try_files' line out if you set up php-fpm/php-fcgi on another machine.  And then cross your fingers that you won't get hacked.
      try_files $uri =404;

      fastcgi_split_path_info ^(.+\.php)(/.+)$;
      #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini

      include fastcgi_params;
      fastcgi_index index.php;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      # fastcgi_intercept_errors on;
      fastcgi_pass 127.0.0.1:9000;
    }

  }

  <% end %>

  if (-f $document_root/system/maintenance.html) {
    rewrite  ^(.*)$  /system/maintenance.html last;
    break;
  }

  try_files $uri/index.html $uri @unicorn;

  location @unicorn {
    # an HTTP header important enough to have its own Wikipedia entry:
    # http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if you forward HTTPS traffic to unicorn,
    # this helps Rack set the proper URL scheme for doing redirects:
    # proxy_set_header X-Forwarded-Proto $scheme;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    proxy_pass http://unicorn_<%= application.downcase %>_<%= stage %>;
  }

  error_page 500 502 503 504 <%= error_500_path ? error_500_path : '/500.html' %>;
  client_max_body_size 4G;
  keepalive_timeout 10;
}

<% if nginx_ssl_enabled %>
server {
  listen <%= nginx_ssl_ip ? "#{nginx_ssl_ip}:" : '' %>443;

  ssl on;
  ssl_certificate <%= nginx_ssl_path %><%= nginx_ssl_certificate %>;
  ssl_certificate_key <%= nginx_ssl_path %><%= nginx_ssl_key %>;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;
  ssl_prefer_server_ciphers on;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;

  <% if nginx_server_name %>
  server_name <%= nginx_server_name %>;
  <% end  %>
  root <%= current_path %>/public;

  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }

  if (-f $document_root/system/maintenance.html) {
    rewrite  ^(.*)$  /system/maintenance.html last;
    break;
  }

  try_files $uri/index.html $uri @unicorn;

  location @unicorn {
    proxy_set_header   X-Forwarded-Proto https;
    # an HTTP header important enough to have its own Wikipedia entry:
    # http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if you forward HTTPS traffic to unicorn,
    # this helps Rack set the proper URL scheme for doing redirects:
    # proxy_set_header X-Forwarded-Proto $scheme;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    proxy_pass http://unicorn_<%= application.downcase %>_<%= stage %>;
  }

  error_page 500 502 503 504 <%= error_500_path ? error_500_path : '/500.html' %>;
  client_max_body_size 4G;
  keepalive_timeout 70;
}
<% end %>